package cocoa.collection.immutable;
import cocoa.collection.immutable.ImmutableCollection;
import cocoa.lang.ops.Index;

pub interface ImmutableList<T> extends ImmutableCollection<T>, Index<u64,T> {
    fn front() T;
    fn back() T;

    pub class ImmutableListIterator<T> implements DoubleEndedIterator<T> {
        list: ImmutableList<T>;
        nextPosition: u64;
        backNextPosition: u64;
        pub ListIterator(list: ImmutableList<T>) {
            this.nextPosition = 0;
            this.backNextPosition = list.size() - 1;
            this.list = list;
        }
        fn next() Option<T> {
            if nextPosition == backNextPosition {
                return new None;
            }
            let next = list[nextPosition];
            nextPosition += 1;
            return new Some(next);
        }
        fn nextBack() Option<T> {
            if nextPosition == backNextPosition {
                return new None;
            }
            let next = list[backNextPosition];
            backNextPosition -= 1;
            return new Some(next);
        }
    }
}
