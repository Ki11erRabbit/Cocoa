use std::str::FromStr;
use crate::ast;
use either::Either;
grammar;

pub File: File = {
    <package:PackageDeclaration> <imports:ImportDeclarations> <class:ClassDeclaration> => {
        File::new(package, imports, class)
    },
};

PackageDeclaration: PackageDeclaration = {
    "package" <path:Path> ";" => path,
};

ImportDeclarations: Vec<ImportDeclaration> = {
    <import:ImportDeclaration> => vec![import],
    <imports:ImportDeclarations> <import:ImportDeclaration> => {
        let mut imports = imports;
        imports.push(import);
        imports
    },
};

ImportDeclaration: ImportDeclaration = {
    "import" <path:ImportPath> ";" => ImportDeclaration::new(path),
};

ImportPath: ImportPath = {
    <path:Path> => ImportPath::new(path, String::new()),
};

#[inline]
Path: Vec<String> = {
    <mut path:(Identifier ".")*> <last:Identifier> => {
        path.push(last);
        path
    }
};

#[inline]
InterfaceList: Vec<SuperClass> = {
    <mut list:(SuperClass ",")*> <last:SuperClass> => {
        list.push(last);
        list
    }
};

SuperClass: SuperClass = {
    <path:ImportPath> => SuperClass::Class(path, Vec::new()),
    <path:ImportPath> "<" <ty:TypeParameters> ">" => SuperClass::Class(path, ty),
};

#[inline]
TypeParameters: Vec<TypeParameter> = {
    <mut list:(TypeParameter ",")*> <last:TypeParameter> => {
        list.push(last);
        list
    }
};

TypeParameter: TypeParameter = {
    <id:Identifier> => TypeParameter::new(id, Vec::new()),
    <id:Identifier> ":" <bounds:Bounds> => TypeParameter::new(id, bounds),
};

#[inline]
Bounds: Vec<Type> = {
    <mut list:(Type "+")*> <last:Type> => {
        list.push(last);
        list
    }
};

#[inline]
ClassDeclaration: ClassDeclaration = {
    "pub" "class" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .decs(decs)
        .build()
    },

    "pub" "interface" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Public)
        .decs(decs)
        .build()
    },
    "prot" "interface" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Protected)
        .decs(decs)
        .build()
    },
    "interface" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Private)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .decs(decs)
        .build()
    },


    "pub" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },

    "pub" "interface" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Public)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "interface" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Protected)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "interface" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Private)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    

    "pub" "class" <id:Identifier> "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .decs(decs)
        .build()
    },

    "pub" "interface" <id:Identifier> "extends" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Public)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "prot" "interface" <id:Identifier> "extends" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Protected)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "interface" <id:Identifier> "extends" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Private)
        .interfaces(list)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .decs(decs)
        .build()
    },


    "pub" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },

    "pub" "interface" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Public)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "interface" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Protected)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "interface" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .class_type(ClassType::Interface)
        .visibility(Visibility::Private)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    

    "pub" "class" <id:Identifier> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .interfaces(list)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .interfaces(list)
        .decs(decs)
        .build()
    },


    "pub" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "<" <ty:TypeParameters> ">" "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },


    "pub" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .type_parameters(ty)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    

    "pub" "class" <id:Identifier> "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .interfaces(list)
        .super_class(sup)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .interfaces(list)
        .super_class(sup)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .interfaces(list)
        .decs(decs)
        .build()
    },


    "pub" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .type_parameters(ty)
        .interfaces(list)
        .decs(decs)
        .build()
    },
    "prot" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .interfaces(list)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },

    "pub" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .super_class(sup)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "prot" "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .super_class(sup)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
    "abstract" "class" <id:Identifier> "<" <ty:TypeParameters> ">" "extends" <sup:SuperClass> "implements" <list:InterfaceList> "{" <decs:Declarations> "}" => {
        ClassDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .super_class(sup)
        .interfaces(list)
        .type_parameters(ty)
        .decs(decs)
        .build()
    },
};


#[inline]
Field: Field = {
    "pub" <id:Identifier> ":" <ty:Type> ";" => Field::new(Visibility::Public, id, ty),
    "prot" <id:Identifier> ":" <ty:Type> ";" => Field::new(Visibility::Protected, id, ty),
    <id:Identifier> ":" <ty:Type> ";" => Field::new(Visibility::Private, id, ty),
};

Type: Type = {
    "u8" => Type::Primitive(PrimitiveType::U8),
    "u16" => Type::Primitive(PrimitiveType::U16),
    "u32" => Type::Primitive(PrimitiveType::U32),
    "u64" => Type::Primitive(PrimitiveType::U64),
    "i8" => Type::Primitive(PrimitiveType::I8),
    "i16" => Type::Primitive(PrimitiveType::I16),
    "i32" => Type::Primitive(PrimitiveType::I32),
    "i64" => Type::Primitive(PrimitiveType::I64),
    "f32" => Type::Primitive(PrimitiveType::F32),
    "f64" => Type::Primitive(PrimitiveType::F64),
    "boolean" => Type::Primitive(PrimitiveType::Bool),
    "char" => Type::Primitive(PrimitiveType::Char),
    "(" ")" => Type::Primitive(PrimitiveType::Unit),
    "[" <ty:Type> "]" => Type::Array(Box::new(ty)),
    <ty1:Type> "<" <ty2:Type> ">" => Type::TypeArguments(Box::new(ty1), Box::new(ty2)),
    <path:ImportPath> => Type::ClassType(path),
};

#[inline]
Declarations: Vec<Declaration> = {
    <dec:Declaration> <mut list:(Declaration)*> => {
        list.push(dec);
        list
    }
    <mut list:(Declaration)*> => {
        list
    }
};

Declaration: Declaration = {
    <field:Field> => Declaration::Field(field),
    <method:MethodDeclaration> => Declaration::Method(method),
    <class:ClassDeclaration> => Declaration::Class(class),
};

#[inline]
MethodDeclaration: MethodDeclaration = {
    "pub" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "prot" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "pub" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "prot" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "fn" <id:Identifier> "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "pub" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "prot" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "pub" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .type_parameters(typ)
        .build()
    },
    "prot" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },

    "pub" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .is_static(true)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .is_static(true)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .is_static(true)
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Left(Some(Statement::Block(block))))
        .type_parameters(typ)
        .is_static(true)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Protected)
        .parameters(args)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "{" <block:Statements> "}" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .is_static(true)
        .type_parameters(typ)
        .body(Either::Left(Some(Statement::Block(block))))
        .build()
    },
    

    "pub" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .build()
    },
    "prot" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "pub" "fn" <id:Identifier> "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "prot" "fn" <id:Identifier> "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "fn" <id:Identifier> "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "pub" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "prot" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "pub" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Some(Statement::Block(block)))
        .type_parameters(typ)
        .build()
    },
    "prot" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .type_parameters(typ)
        .body(Some(Statement::Block(block)))
        .build()
    },
    "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .type_parameters(typ)
        .body(Some(Statement::Block(block)))
        .build()
    },

    "pub" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .build()
    },
    "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .build()
    },
    "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .is_static(true)
        .parameters(args)
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .is_static(true)
        .build()
    },
    "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .is_static(true)
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .type_parameters(typ)
        .is_static(true)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Protected)
        .parameters(args)
        .type_parameters(typ)
        .build()
    },
    "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" ";" => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .is_static(true)
        .type_parameters(typ)
        .build()
    },
    
    
    "pub" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .body(Either::Right(idx))
        .build()
    },
    "prot" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer>  => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .body(Either::Right(idx))
        .build()
    },
    "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer>  => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .body(Either::Right(idx))
        .build()
    },
    "pub" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Right(idx))
        .build()
    },
    "prot" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .body(Either::Right(idx))
        .build()
    },
    "fn" <id:Identifier> "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .body(Either::Right(idx))
        .build()
    },
    "pub" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Right(idx))
        .build()
    },
    "prot" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Right(idx))
        .build()
    },
    "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Right(idx))
        .build()
    },
    "pub" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Right(idx))
        .type_parameters(typ)
        .build()
    },
    "prot" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .type_parameters(typ)
        .body(Either::Right(idx))
        .build()
    },
    "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .type_parameters(typ)
        .body(Either::Right(idx))
        .build()
    },

    "pub" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Right(idx))
        .return_type(ty)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .body(Either::Right(idx))
        .return_type(ty)
        .build()
    },
    "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .body(Either::Right(idx))
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Right(idx))
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .is_static(true)
        .name(id)
        .visibility(Visibility::Protected)
        .parameters(args)
        .body(Either::Right(idx))
        .build()
    },
    "static" "fn" <id:Identifier> "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .body(Either::Right(idx))
        .is_static(true)
        .parameters(args)
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .body(Either::Right(idx))
        .visibility(Visibility::Public)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Protected)
        .body(Either::Right(idx))
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .is_static(true)
        .build()
    },
    "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" <ty:Type> "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .return_type(ty)
        .type_parameters(typ)
        .body(Either::Right(idx))
        .is_static(true)
        .build()
    },
    "pub" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Public)
        .parameters(args)
        .body(Either::Right(idx))
        .type_parameters(typ)
        .is_static(true)
        .build()
    },
    "prot" "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .is_static(true)
        .visibility(Visibility::Protected)
        .body(Either::Right(idx))
        .parameters(args)
        .type_parameters(typ)
        .build()
    },
    "static" "fn" <id:Identifier> "<" <typ:TypeParameters> ">" "(" <args:ParmeterList> ")" "@" <idx:Integer> => {
        MethodDeclarationBuilder::new()
        .name(id)
        .visibility(Visibility::Private)
        .parameters(args)
        .is_static(true)
        .body(Either::Right(idx))
        .type_parameters(typ)
        .build()
    },
};

#[inline]
ParmeterList: Vec<Parameter> = {
    <mut list:(Parameter ",")*> <last:Parameter?> => {
        if let Some(last) = last {
            list.push(last);
        }
        list
    }
};

Parameter: Parameter = {
    <id:Identifier> ":" <ty:Type> => Parameter::new(id, ty),
};

#[inline]
Statements: Vec<Statement> = {
    <mut list:Statements+> => {
        list
    }
};

Statement: Statement = {
    <block:Block> => Statement::Block(block),
    <whle:WhileStatement> => Statement::While(whle),
    <fr:ForStatement> => Statement::For(fr),
    "return" <e:Expression> ";" => Statement::Return(e),
    "return" ";" => Statement::Return(None),
    "break" ";" => Statement::Break,
    "continue" ";" => Statement::Continue,
    <e:Expression> ";" => Statement::Expression(e),
    "let" <id:Identifier> ":" <ty:Type> "=" <e:Expression> ";" => Statement::Let(id, Some(ty), e),
    "let" <id:Identifier> "=" <e:Expression> ";" => Statement::Let(id, None, e),
    <e:Expression> => Statement::HangingExpression(e),
    <ife:IfExpression> => Statement::If(ife),
};

#[inline]
Block: Vec<Statement> = {
    "{" <stmts:Statements> "}" => stmts,
};

WhileStatement: WhileStatement = {
    "while" <cond:Expression> <block:Block> => WhileStatement::While(cond, block),
};

ForStatement: ForStatement = {
    "for" <id:Identifier> "in" <e:Expression> <block:Block> => ForStatement::ForIn(id, e, block),
};

LiteralValue: Literal = {
    <i:Integer> => Literal::Int(i),
    <f:Float> => Literal::Float(f),
    <b:Bool> => Literal::Bool(b),
    <s:String> => Literal::String(s),
};


Expression: Expression = {
    #[precedence(level="0")]
    <id:Identifier> => Expression::Variable(id),
    <l:LiteralValue> => Expression::Literal(l),
    <e:Expression> "." <id:Identifier> => Expression::FieldAccess(Box::new(e), id),
    <e:Expression> "(" <args:ArgList> ")" => Expression::Call(Box::new(e), args),
    <path:ImportPath> "." <id:Identifier> => Expression::StaticAccess(path, id),
    "new" <path:ImportPath> => Expression::New(path),
    <e:Expression> "[" <index:Expression> "]" => Expression::ArrayAccess(Box::new(e), Box::new(index)),
    "(" <e:Expression> ")" => Expression::Paren(Box::new(e)),
    <e:Expression>  "as" <ty:Type> => Expression::Cast(ty, Box::new(e)),
    <ife:IfExpression> => Expression::If(ife),
    "this" => Expression::This,
    "super" => Expression::Super,
    #[precedence(level="1")]
    "!" <Expression> => Expression::Unary(UnarayOperator::Not, Box::new(Expression)),
    "-" <Expression> => Expression::Unary(UnarayOperator::Neg, Box::new(Expression)),
    #[precedence(level="2")] #[assoc(side="left")]
    <e1:Expression> "*" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::Mul, Box::new(e2)),
    <e1:Expression> "/" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::Div, Box::new(e2)),
    <e1:Expression> "%" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::Mod, Box::new(e2)),
    #[precedence(level="3")] #[assoc(side="left")]
    <e1:Expression> "<<" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::LeftShift, Box::new(e2)),
    <e1:Expression> ">>" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::RightShift, Box::new(e2)),
    #[precedence(level="4")] #[assoc(side="left")]
    <e1:Expression> "<" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::LessThan, Box::new(e2)),
    <e1:Expression> "<=" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::LessThanOrEqual, Box::new(e2)),
    <e1:Expression> ">" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::GreaterThan, Box::new(e2)),
    <e1:Expression> ">=" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::GreaterThanOrEqual, Box::new(e2)),
    <e1:Expression> "instanceof" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::InstanceOf, Box::new(e2)),
    #[precedence(level="5")] #[assoc(side="left")]
    <e1:Expression> "==" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::Equal, Box::new(e2)),
    <e1:Expression> "!=" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::NotEqual, Box::new(e2)),
    #[precedence(level="6")] #[assoc(side="left")]
    <e1:Expression> "&" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::BitAnd, Box::new(e2)),
    #[precedence(level="7")] #[assoc(side="left")]
    <e1:Expression> "^" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::BitXor, Box::new(e2)),
    #[precedence(level="8")] #[assoc(side="left")]
    <e1:Expression> "|" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::BitOr, Box::new(e2)),
    #[precedence(level="9")] #[assoc(side="left")]
    <e1:Expression> "&&" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::LogicalAnd, Box::new(e2)),
    #[precedence(level="10")] #[assoc(side="left")]
    <e1:Expression> "||" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::LogicalOr, Box::new(e2)),
    #[precedence(level="11")] #[assoc(side="left")]
    <e1:Expression> ".." <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::ExclusiveRange, Box::new(e2)),
    <e1:Expression> "..=" <e2:Expression> => Expression::Binary(Box::new(e1), BinaryOperator::InclusiveRange, Box::new(e2)),
};

IfExpression: IfExpression = {
    "if" <cond:Expression> <block:Block> => IfExpression::If(Box::new(cond), Box::new(block), None),
    "if" <cond:Expression> <block:Block> "else" <elsei:IfExpression> => IfExpression::If(Box::new(cond), Box::new(block), Some(Either::Right(Box::new(elsei)))),
    "if" <cond:Expression> <block:Block> "else" <elseb:Block> => IfExpression::If(Box::new(cond), Box::new(block), Some(Either::Left(Box::new(elseb)))),
};


ArgList: Vec<Expression> = {
    <e:Expression> => vec![e],
    <mut list:(Expression ",")*> <last:Expression> => {
        list.push(last);
        list
    }
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum token::Token {
        Identifier => token::Token::Identifier(<String>),
        // Literals
        Integer => token::Token::Integer(<String>),
        Float => token::Token::Float(<String>),
        String => token::Token::String(<String>),
        Char => token::Token::Char(<char>),
        Bool => token::Token::Bool(<bool>),
        // Types
        "u8" => token::Token::U8,
        "u16" => token::Token::U16,
        "u32" => token::Token::U32,
        "u64" => token::Token::U64,
        "i8" => token::Token::I8,
        "i16" => token::Token::I16,
        "i32" => token::Token::I32,
        "i64" => token::Token::I64,
        "f32" => token::Token::F32,
        "f64" => token::Token::F64,
        "boolean" => token::Token::Bool,
        "char" => token::Token::Char,
        // Misc Symbols
        ";" => token::Token::Semicolon,
        ":" => token::Token::Colon,
        "," => token::Token::Comma,
        "." => token::Token::Dot,
        "@" => token::Token::At,
        "(" => token::Token::LeftParen,
        ")" => token::Token::RightParen,
        "{" => token::Token::LeftBrace,
        "}" => token::Token::RightBrace,
        "[" => token::Token::LeftBracket,
        "]" => token::Token::RightBracket,
        // Operators
        "+" => token::Token::Plus,
        "-" => token::Token::Minus,
        "*" => token::Token::Multiply,
        "/" => token::Token::Divide,
        "%" => token::Token::Modulo,
        "=" => token::Token::Assign,
        "==" => token::Token::Equal,
        "!=" => token::Token::NotEqual,
        "<" => token::Token::LessThan,
        ">" => token::Token::GreaterThan,
        "<=" => token::Token::LessThanOrEqual,
        ">=" => token::Token::GreaterThanOrEqual,
        "&&" => token::Token::And,
        "||" => token::Token::Or,
        "!" => token::Token::Not,
        "&" => token::Token::BitwiseAnd,
        "|" => token::Token::BitwiseOr,
        "^" => token::Token::BitwiseXor,
        "<<" => token::Token::BitwiseShiftLeft,
        ">>" => token::Token::BitwiseShiftRight,
        ".." => token::Token::ExclusiveRange,
        "..=" => token::Token::InclusiveRange,
        // Keywords
        "let" => token::Token::Let,
        "class" => token::Token::Class,
        "interface" => token::Token::Interface,
        "abstract" => token::Token::Abstract,
        "pub" => token::Token::Public,
        "prot" => token::Token::Protected,
        "implements" => token::Token::Implements,
        "extends" => token::Token::Extends,
        "static" => token::Token::Static,
        "const" => token::Token::Const,
        "break" => token::Token::Break,
        "continue" => token::Token::Continue,
        "return" => token::Token::Return,
        "if" => token::Token::If,
        "else" => token::Token::Else,
        "for" => token::Token::For,
        "in" => token::Token::In,
        "while" => token::Token::While,
        "loop" => token::Token::Loop,
        "instanceof" => token::Token::InstanceOf,
        "fn" => token::Token::Fn,
        "as" => token::Token::As,
        "null" => token::Token::Null,
        "new" => token::Token::New,
        "import" => token::Token::Import,
        "package" => token::Token::Package,
        "this" => token::Token::This,
        "super" => token::Token::Super,
        "This" => token::Token::ThisType,
    }
}
